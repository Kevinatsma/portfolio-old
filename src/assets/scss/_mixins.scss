@import './animations';
@import './config';
@import './extends';

// Layout

@mixin flex($justifyContent: flex-start, $alignItems: flex-start, $direction: row, $wrap: no-wrap) {
  align-items: $alignItems;
  display: flex;
  flex-flow: $direction $wrap;
  justify-content: $justifyContent;
}

////////////////////////////
////////////////////////////
// Buttons

@mixin iconButton($iconColor: $white, $bgColor: transparent) {
  background-color: $bgColor;
  color: $iconColor;
  font-size: 18px;
  font-weight: $light;
  height: 40px;
  letter-spacing: 1px;
  margin: 0 10px;
  opacity: 1;
  transition: all .35s cubic-bezier(0.165, 0.84, 0.44, 1);
  width: 40px;

  @extend %flex-center;

  &:hover {
    animation: .6s background-anim;
    border: 1px solid $white;
  }

  &:focus, &:active {
    background-color: transparent;
    border-width: 0 0 1.5px 0;
    border-color: $white-2;
    border-style: solid;
    outline: 0;
  }

  &--active {
    border-width: 0 0 1.5px 0;
    border-color: $white-2;
    border-style: solid;
  }
}

@mixin backButton() {
  background-color: transparent;
  border: 2px solid $grey-8;
  border-radius: 50%;
  color: $grey-8;
  cursor: pointer;
  font-size: 15px;
  height: 35px;
  opacity: 1;
  transition: all .35s cubic-bezier(0.165, 0.84, 0.44, 1);
  width: 35px;

  @extend %flex-center;

  &:hover {
    border: 2px solid $white;
    color: $white;

    i, svg {
      transform: translateX(-2px);
    }
  }

  &:focus {
    background: none;
    outline: 0;
  }

  i, svg {
    transition: transform .35s ease-in-out;
  }
}

@mixin outlineIconButton() {
  background-color: transparent;
  border: 1px solid $grey-8;
  border-radius: 50%;
  color: $grey-8;
  cursor: pointer;
  font-size: 15px;
  height: 35px;
  opacity: 1;
  transition: all .35s cubic-bezier(0.165, 0.84, 0.44, 1);
  width: 35px;

  @extend %flex-center;

  &:hover {
    border: 1px solid $white;
    color: $white;

    i, svg {
      transform: scale(1.05);
    }
  }

  &:focus {
    background: none;
    outline: 0;
  }

  i, svg {
    transition: transform .35s ease-in-out;
  }

  &.disabled {
    border: 1px solid $grey-3;
    color: $grey-3;
    cursor: not-allowed;
  }
}

@mixin outlineIconCTA() {
  box-sizing: border-box;
  border: 1px solid $grey-5;
  border-radius: 25px;
  display: flex;
  margin: 1em auto;
  padding: .75em 2.5em;
  transition: border .25s ease-in-out;
  width: fit-content;

  span, i, svg {
    color: $grey-5;
    transition: color .25s ease-in-out;
  }

  i, svg {
    font-size: 16px;
    margin: 0 10px 0 0;
  }

  &:hover {
    border: 1px solid $white;
    cursor: pointer;

    span, i, svg {
      color: $white;
    }
  }

  &:focus {
    background-color: $grey;
  }
}

@mixin outlineIconLeft() {
  align-items: center;
  background-color: transparent;
  box-sizing: border-box;
  border: 1px solid $grey-5;
  border-radius: 25px;
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  letter-spacing: $text-spacing;
  padding: .75em 2.5em;
  width: auto;

  img, i, svg {
    height: 26px;
    margin-right: 25px;
    width: 26px;
  }

  i, svg {
    font-size: 16px;
    margin: 0 10px 0 0;
  }

  &:hover {
    border: 1px solid $white;
    cursor: pointer;

    span, i, svg {
      color: $white;
    }
  }

  &:focus {
    background-color: $grey;
  }
}

@mixin image-overlay() {
  position: relative;

  &::before {
    background-color: rgba(0, 0, 0, .4);
    bottom: 0;
    content: '';
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: 0;
  }
} 

////////////////////////////
////////////////////////////
// Calculations


//  Rem
$baseFontSize: 10; // Based on HTML reset { font-size: 62.5%; }

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px: ();
  $rem: ();
  $root: $baseFontSize;
  
  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else if type-of($value) == number {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == 'px' {
        $px: append($px, $value);
        $rem: append($rem, ($val / $root + rem));
      }

      @if $unit == 'rem' {
        $px: append($px, ($val * $root + px));
        $rem: append($rem, $value);
      }
    } @else {
      $px: append($px, $value);
      $rem: append($rem, $value);
    }
  }
  
  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// Media queries
@mixin respond-up($size) {
  @if $size == xs {
    @media only screen and (min-width: $size-xs) {
      @content;
    }
  } @else if $size == sm {
    @media only screen and (min-width: $sm) {
      @content;
    }
  } @else if $size == md {
    @media only screen and (min-width: $md) {
      @content;
    }
  } @else if $size == bootlg {
    @media only screen and (min-width: $size-boot-lg) {
      @content;
    }
  } @else if $size == lg {
    @media only screen and (min-width: $lg) {
      @content;
    }
  } @else if $size == xl {
    @media only screen and (min-width: $xl) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $size) {
      @content;
    }
  }
}
  
@mixin respond-down($size) {
  @if $size == xs {
    @media only screen and (max-width: $size-xs) {
      @content;
    }
  } @else if $size == sm {
    @media only screen and (max-width: ($sm - 1px)) {
      @content;
    }
  } @else if $size == md {
    @media only screen and (max-width: ($md - 1px)) {
      @content;
    }
  } @else if $size == bootlg {
    @media only screen and (max-width: ($size-boot-lg - 1px)) {
      @content;
    }
  } @else if $size == lg {
    @media only screen and (max-width: ($lg - 1px)) {
      @content;
    }
  } @else if $size == xl {
    @media only screen and (max-width: ($xl - 1px)) {
      @content;
    }
  } @else {
    @media only screen and (max-width: $size) {
      @content;
    }
  }
}

@mixin containerPadding() {
  padding: $pd-desktop;

  @include respond-down($md) {
    padding: $pd-tablet-y $pd-tablet-x;
  }

  @include respond-down($sm) {
    padding: $pd-mobile-y $pd-mobile-x;
  }
}